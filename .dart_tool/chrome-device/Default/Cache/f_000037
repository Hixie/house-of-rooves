define(['dart_sdk'], (function load__packages__home_automation_tools__src__common_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var common = Object.create(dart.library);
  var $toString = dartx.toString;
  var $compareTo = dartx.compareTo;
  var $truncate = dartx.truncate;
  var $trimRight = dartx.trimRight;
  var LogLevelL = () => (LogLevelL = dart.constFn(dart.legacy(common.LogLevel)))();
  var StackTraceL = () => (StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))();
  var dynamicAndStackTraceLToNull = () => (dynamicAndStackTraceLToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, StackTraceL()])))();
  var VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var _StreamSubscriptionTransformerOfboolL$boolL = () => (_StreamSubscriptionTransformerOfboolL$boolL = dart.constFn(async._StreamSubscriptionTransformer$(boolL(), boolL())))();
  var StreamControllerOfboolL = () => (StreamControllerOfboolL = dart.constFn(async.StreamController$(boolL())))();
  var boolLToNull = () => (boolLToNull = dart.constFn(dart.fnType(core.Null, [boolL()])))();
  var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  var FutureLOfvoid = () => (FutureLOfvoid = dart.constFn(dart.legacy(FutureOfvoid())))();
  var VoidToFutureLOfvoid = () => (VoidToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [])))();
  var StreamSubscriptionOfboolL = () => (StreamSubscriptionOfboolL = dart.constFn(async.StreamSubscription$(boolL())))();
  var StreamSubscriptionLOfboolL = () => (StreamSubscriptionLOfboolL = dart.constFn(dart.legacy(StreamSubscriptionOfboolL())))();
  var StreamOfboolL = () => (StreamOfboolL = dart.constFn(async.Stream$(boolL())))();
  var StreamLOfboolL = () => (StreamLOfboolL = dart.constFn(dart.legacy(StreamOfboolL())))();
  var StreamLOfboolLAndboolLToStreamSubscriptionLOfboolL = () => (StreamLOfboolLAndboolLToStreamSubscriptionLOfboolL = dart.constFn(dart.fnType(StreamSubscriptionLOfboolL(), [StreamLOfboolL(), boolL()])))();
  const CT = Object.create(null);
  var L0 = "package:home_automation_tools/src/common.dart";
  var L1 = "file:///C:/dev/dart-home-automation-tools/lib/src/common.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: common.LogLevel.prototype,
        [_name$]: "LogLevel.error",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: common.LogLevel.prototype,
        [_name$]: "LogLevel.info",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: common.LogLevel.prototype,
        [_name$]: "LogLevel.verbose",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2], LogLevelL());
    }
  }, false);
  var _name$ = dart.privateName(common, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  common.LogLevel = class LogLevel extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (common.LogLevel.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = common.LogLevel.prototype;
  dart.addTypeTests(common.LogLevel);
  dart.addTypeCaches(common.LogLevel);
  dart.setMethodSignature(common.LogLevel, () => ({
    __proto__: dart.getMethods(common.LogLevel.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(common.LogLevel, L0);
  dart.setFieldSignature(common.LogLevel, () => ({
    __proto__: dart.getFields(common.LogLevel.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(common.LogLevel, ['toString']);
  common.LogLevel.error = C0 || CT.C0;
  common.LogLevel.info = C1 || CT.C1;
  common.LogLevel.verbose = C2 || CT.C2;
  common.LogLevel.values = C3 || CT.C3;
  const _is_StreamTransformerInstance_default = Symbol('_is_StreamTransformerInstance_default');
  common.StreamTransformerInstance$ = dart.generic((From, To) => {
    var ToL = () => (ToL = dart.constFn(dart.legacy(To)))();
    var StreamSinkOfToL = () => (StreamSinkOfToL = dart.constFn(async.StreamSink$(ToL())))();
    var StreamSinkLOfToL = () => (StreamSinkLOfToL = dart.constFn(dart.legacy(StreamSinkOfToL())))();
    class StreamTransformerInstance extends core.Object {
      handleError(exception, stack, output) {
        StreamSinkLOfToL().as(output);
        output.addError(exception, stack);
        return false;
      }
    }
    (StreamTransformerInstance.new = function() {
      ;
    }).prototype = StreamTransformerInstance.prototype;
    dart.addTypeTests(StreamTransformerInstance);
    StreamTransformerInstance.prototype[_is_StreamTransformerInstance_default] = true;
    dart.addTypeCaches(StreamTransformerInstance);
    dart.setMethodSignature(StreamTransformerInstance, () => ({
      __proto__: dart.getMethods(StreamTransformerInstance.__proto__),
      handleError: dart.fnType(dart.legacy(core.bool), [dart.dynamic, dart.legacy(core.StackTrace), dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(StreamTransformerInstance, L0);
    return StreamTransformerInstance;
  });
  common.StreamTransformerInstance = common.StreamTransformerInstance$();
  dart.addTypeTests(common.StreamTransformerInstance, _is_StreamTransformerInstance_default);
  const _is_StreamTransformerBase_default = Symbol('_is_StreamTransformerBase_default');
  var constructor$ = dart.privateName(common, "StreamTransformerBase.constructor");
  common.StreamTransformerBase$ = dart.generic((From, To) => {
    var FromL = () => (FromL = dart.constFn(dart.legacy(From)))();
    var StreamOfFromL = () => (StreamOfFromL = dart.constFn(async.Stream$(FromL())))();
    var StreamLOfFromL = () => (StreamLOfFromL = dart.constFn(dart.legacy(StreamOfFromL())))();
    var FromLToNull = () => (FromLToNull = dart.constFn(dart.fnType(core.Null, [FromL()])))();
    var ToL = () => (ToL = dart.constFn(dart.legacy(To)))();
    var StreamControllerOfToL = () => (StreamControllerOfToL = dart.constFn(async.StreamController$(ToL())))();
    class StreamTransformerBase extends core.Object {
      get _constructor() {
        return this[constructor$];
      }
      set _constructor(value) {
        super._constructor = value;
      }
      bind(stream) {
        StreamLOfFromL().as(stream);
        let output = null;
        let input = null;
        let instance = this._constructor();
        output = StreamControllerOfToL().new({onListen: dart.fn(() => {
            input = stream.listen(dart.fn(event => {
              if (dart.test(instance.handleData(event, output.sink))) {
                input.cancel();
                output.close();
              }
            }, FromLToNull()), {onError: dart.fn((exception, stack) => {
                if (dart.test(instance.handleError(exception, stack, output.sink))) {
                  input.cancel();
                  output.close();
                }
              }, dynamicAndStackTraceLToNull()), onDone: dart.fn(() => {
                instance.handleDone(output.sink);
                output.close();
              }, VoidToNull())});
          }, VoidToNull()), onPause: dart.fn(() => {
            input.pause();
          }, VoidToNull()), onResume: dart.fn(() => {
            input.resume();
          }, VoidToNull()), onCancel: dart.fn(() => {
            input.cancel();
          }, VoidToNull())});
        return output.stream;
      }
      cast(RS, TS) {
        dart.throw("not implemented");
      }
    }
    (StreamTransformerBase.new = function(constructor) {
      this[constructor$] = constructor;
      if (!(this._constructor != null)) dart.assertFailed(null, L1, 40, 12, "constructor != null");
    }).prototype = StreamTransformerBase.prototype;
    dart.addTypeTests(StreamTransformerBase);
    StreamTransformerBase.prototype[_is_StreamTransformerBase_default] = true;
    dart.addTypeCaches(StreamTransformerBase);
    StreamTransformerBase[dart.implements] = () => [async.StreamTransformer$(dart.legacy(From), dart.legacy(To))];
    dart.setMethodSignature(StreamTransformerBase, () => ({
      __proto__: dart.getMethods(StreamTransformerBase.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(To))), [dart.legacy(core.Object)]),
      cast: dart.gFnType((RS, TS) => [dart.legacy(async.StreamTransformer$(dart.legacy(RS), dart.legacy(TS))), []])
    }));
    dart.setLibraryUri(StreamTransformerBase, L0);
    dart.setFieldSignature(StreamTransformerBase, () => ({
      __proto__: dart.getFields(StreamTransformerBase.__proto__),
      _constructor: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(common.StreamTransformerInstance$(dart.legacy(From), dart.legacy(To))), [])))
    }));
    return StreamTransformerBase;
  });
  common.StreamTransformerBase = common.StreamTransformerBase$();
  dart.addTypeTests(common.StreamTransformerBase, _is_StreamTransformerBase_default);
  common.min = function min(T, a, b) {
    if (a == null) return b;
    if (b == null) return a;
    return dart.notNull(a[$compareTo](b)) > 0 ? b : a;
  };
  common.max = function max(T, a, b) {
    if (a == null) return b;
    if (b == null) return a;
    return dart.notNull(a[$compareTo](b)) < 0 ? b : a;
  };
  common.debouncer = function debouncer(debounceDuration) {
    return new (_StreamSubscriptionTransformerOfboolL$boolL()).new(dart.fn((input, cancelOnError) => {
      let controller = null;
      let subscription = null;
      let timer = null;
      let lastSentValue = null;
      let lastReceivedValue = null;
      controller = StreamControllerOfboolL().new({onListen: dart.fn(() => {
          subscription = input.listen(dart.fn(value => {
            let t0;
            if (!dart.equals(value, lastReceivedValue)) {
              lastReceivedValue = value;
              t0 = timer;
              t0 == null ? null : t0.cancel();
              if (!dart.equals(value, lastSentValue)) {
                timer = async.Timer.new(debounceDuration, dart.fn(() => {
                  timer = null;
                  lastSentValue = lastReceivedValue;
                  controller.add(lastReceivedValue);
                }, VoidToNull()));
              }
            }
          }, boolLToNull()), {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close'), cancelOnError: cancelOnError});
        }, VoidToNull()), onPause: dart.fn(() => {
          subscription.pause();
        }, VoidToNull()), onResume: dart.fn(() => {
          subscription.resume();
        }, VoidToNull()), onCancel: dart.fn(() => {
          let t0;
          t0 = timer;
          t0 == null ? null : t0.cancel();
          return subscription.cancel();
        }, VoidToFutureLOfvoid())});
      return controller.stream.listen(null);
    }, StreamLOfboolLAndboolLToStreamSubscriptionLOfboolL()));
  };
  common._inverter = function _inverter() {
    return new (_StreamSubscriptionTransformerOfboolL$boolL()).new(dart.fn((input, cancelOnError) => {
      let controller = null;
      let subscription = null;
      controller = StreamControllerOfboolL().new({onListen: dart.fn(() => {
          subscription = input.listen(dart.fn(value => {
            controller.add(!dart.test(value));
          }, boolLToNull()), {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close'), cancelOnError: cancelOnError});
        }, VoidToNull()), onPause: dart.fn(() => {
          subscription.pause();
        }, VoidToNull()), onResume: dart.fn(() => {
          subscription.resume();
        }, VoidToNull()), onCancel: dart.fn(() => subscription.cancel(), VoidToFutureLOfvoid())});
      return controller.stream.listen(null);
    }, StreamLOfboolLAndboolLToStreamSubscriptionLOfboolL()));
  };
  common.prettyDuration = function prettyDuration(duration) {
    let microseconds = duration.inMicroseconds;
    let weeks = (dart.notNull(microseconds) / (1000 * 1000 * 60 * 60 * 24 * 7))[$truncate]();
    microseconds = dart.notNull(microseconds) - weeks * (1000 * 1000 * 60 * 60 * 24 * 7);
    let days = (dart.notNull(microseconds) / (1000 * 1000 * 60 * 60 * 24))[$truncate]();
    microseconds = dart.notNull(microseconds) - days * (1000 * 1000 * 60 * 60 * 24);
    let hours = (dart.notNull(microseconds) / (1000 * 1000 * 60 * 60))[$truncate]();
    microseconds = dart.notNull(microseconds) - hours * (1000 * 1000 * 60 * 60);
    let minutes = (dart.notNull(microseconds) / (1000 * 1000 * 60))[$truncate]();
    microseconds = dart.notNull(microseconds) - minutes * (1000 * 1000 * 60);
    let seconds = (dart.notNull(microseconds) / (1000 * 1000))[$truncate]();
    microseconds = dart.notNull(microseconds) - seconds * (1000 * 1000);
    let milliseconds = (dart.notNull(microseconds) / 1000)[$truncate]();
    microseconds = dart.notNull(microseconds) - milliseconds * 1000;
    if (weeks > 1 && days === 0 && hours === 0) return dart.str(weeks) + " weeks";
    if (weeks === 1 && days === 0 && hours === 0) return "one week";
    if (days > 1 && hours === 0 && minutes === 0) return dart.str(days) + " days";
    if (days === 1 && hours === 0 && minutes === 0) return "one day";
    if (hours > 1 && minutes === 0 && seconds === 0) return dart.str(hours) + " hours";
    if (hours === 1 && minutes === 0 && seconds === 0) return "one hour";
    let result = new core.StringBuffer.new();
    if (weeks > 0) result.write(dart.str(weeks) + "w ");
    if (days > 0) result.write(dart.str(days) + "d ");
    if (hours > 0) result.write(dart.str(hours) + "h ");
    if (minutes > 0) result.write(dart.str(minutes) + "m ");
    if (seconds > 0) result.write(dart.str(seconds) + "s ");
    if (milliseconds > 0) result.write(dart.str(milliseconds) + "ms ");
    if (dart.notNull(microseconds) > 0) result.write(dart.str(microseconds) + "µs ");
    return result.toString()[$trimRight]();
  };
  dart.defineLazy(common, {
    /*common.inverter*/get inverter() {
      return common._inverter();
    }
  }, true);
  dart.trackLibraries("packages/home_automation_tools/src/common.dart", {
    "package:home_automation_tools/src/common.dart": common
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["common.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQqC;;yCAAhC;;;;EAAgC;;;;;;;;;;;;;;;;;;;;;;;;;kBAoBV,WAAsB;8BAAsB;AAClC,QAAjC,AAAO,MAAD,UAAU,SAAS,EAAE,KAAK;AAChC,cAAO;MACT;;;;IAEF;;;;;;;;;;;;;;;;;;;;;;;MASuD;;;;;;;4BAGxB;AACN;AACI;AACW,uBAAW,AAAW;AA+BzD,QA9BD,SAAa,uCACD;AAkBP,YAjBD,QAAQ,AAAO,MAAD,QACZ,QAAM;AACJ,4BAAI,AAAS,QAAD,YAAY,KAAK,EAAE,AAAO,MAAD;AACrB,gBAAd,AAAM,KAAD;AACS,gBAAd,AAAO,MAAD;;yCAGD,SAAS,WAAsB;AACtC,8BAAI,AAAS,QAAD,aAAa,SAAS,EAAE,KAAK,EAAE,AAAO,MAAD;AACjC,kBAAd,AAAM,KAAD;AACS,kBAAd,AAAO,MAAD;;yDAGF;AAC0B,gBAAhC,AAAS,QAAD,YAAY,AAAO,MAAD;AACZ,gBAAd,AAAO,MAAD;;qCAIH;AACM,YAAb,AAAM,KAAD;sCAEG;AACM,YAAd,AAAM,KAAD;sCAEG;AACM,YAAd,AAAM,KAAD;;AAGT,cAAO,AAAO,OAAD;MACf;;AAIyB,QAAvB,WAAM;MACR;;;MAhD2B;AACzB,YAAO,AAAY,qBAAG;IACxB;;;;;;;;;;;;;;;;;;;+BA9B+B,GAAK;AACpC,QAAI,AAAE,CAAD,IAAI,MACP,MAAO,EAAC;AACV,QAAI,AAAE,CAAD,IAAI,MACP,MAAO,EAAC;AACV,UAAsB,cAAf,AAAE,CAAD,aAAW,CAAC,KAAI,IAAI,CAAC,GAAG,CAAC;EACnC;+BAEiC,GAAK;AACpC,QAAI,AAAE,CAAD,IAAI,MACP,MAAO,EAAC;AACV,QAAI,AAAE,CAAD,IAAI,MACP,MAAO,EAAC;AACV,UAAsB,cAAf,AAAE,CAAD,aAAW,CAAC,KAAI,IAAI,CAAC,GAAG,CAAC;EACnC;wCAiEiD;AAC/C,UAAW,yDACT,SAAc,OAAY;AACD;AACE;AACnB;AACD;AACA;AA6BJ,MA5BD,aAAiB,yCACL;AAmBP,UAlBD,eAAe,AAAM,KAAD,QAClB,QAAM;;AACJ,6BAAI,KAAK,EAAI,iBAAiB;AACH,cAAzB,oBAAoB,KAAK;AACV,mBAAf,KAAK;2BAAL,OAAO;AACP,+BAAI,KAAK,EAAI,aAAa;AAMtB,gBALF,QAAY,gBAAM,gBAAgB,EAAE;AACtB,kBAAZ,QAAQ;AAEyB,kBAAjC,gBAAgB,iBAAiB;AACA,kBAAjC,AAAW,UAAD,KAAK,iBAAiB;;;;uCAKpB,UAAX,UAAU,uBACA,UAAX,UAAU,2BACH,aAAa;mCAGvB;AAAyB,UAApB,AAAa,YAAD;oCAChB;AAA0B,UAArB,AAAa,YAAD;oCACjB;;AACO,eAAf,KAAK;uBAAL,OAAO;AACP,gBAAO,AAAa,aAAD;;AAGvB,YAAO,AAAW,AAAO,WAAR,eAAe;;EAGtC;;AAIE,UAAW,yDACT,SAAc,OAAY;AACD;AACE;AAexB,MAdD,aAAiB,yCACL;AAQP,UAPD,eAAe,AAAM,KAAD,QAClB,QAAM;AACkB,YAAtB,AAAW,UAAD,KAAK,WAAC,KAAK;uCAEH,UAAX,UAAU,uBACA,UAAX,UAAU,2BACH,aAAa;mCAGvB;AAAyB,UAApB,AAAa,YAAD;oCAChB;AAA0B,UAArB,AAAa,YAAD;oCACjB,cAAM,AAAa,YAAD;AAE9B,YAAO,AAAW,AAAO,WAAR,eAAe;;EAGtC;kDAE+B;AACzB,uBAAe,AAAS,QAAD;AACvB,gBAAqB,cAAb,YAAY,KAAK,AAAK,AAAO,AAAK,AAAK,AAAK,OAApB,OAAO,KAAK,KAAK,KAAK;AACF,IAAxD,eAAa,aAAb,YAAY,IAAI,AAAM,KAAD,IAAI,AAAK,AAAO,AAAK,AAAK,AAAK,OAApB,OAAO,KAAK,KAAK,KAAK;AAClD,eAAoB,cAAb,YAAY,KAAK,AAAK,AAAO,AAAK,AAAK,OAAf,OAAO,KAAK,KAAK;AACD,IAAnD,eAAa,aAAb,YAAY,IAAI,AAAK,IAAD,IAAI,AAAK,AAAO,AAAK,AAAK,OAAf,OAAO,KAAK,KAAK;AAC5C,gBAAqB,cAAb,YAAY,KAAK,AAAK,AAAO,AAAK,OAAV,OAAO,KAAK;AACD,IAA/C,eAAa,aAAb,YAAY,IAAI,AAAM,KAAD,IAAI,AAAK,AAAO,AAAK,OAAV,OAAO,KAAK;AACxC,kBAAuB,cAAb,YAAY,KAAK,AAAK,AAAO,OAAL,OAAO;AACD,IAA5C,eAAa,aAAb,YAAY,IAAI,AAAQ,OAAD,IAAI,AAAK,AAAO,OAAL,OAAO;AACrC,kBAAuB,cAAb,YAAY,KAAK,AAAK,OAAE;AACC,IAAvC,eAAa,aAAb,YAAY,IAAI,AAAQ,OAAD,IAAI,AAAK,OAAE;AAC9B,uBAA4B,cAAb,YAAY,IAAK;AACC,IAArC,eAAa,aAAb,YAAY,IAAI,AAAa,YAAD,GAAI;AAEhC,QAAI,AAAM,KAAD,GAAG,KAAK,AAAK,IAAD,KAAI,KAAK,AAAM,KAAD,KAAI,GACrC,MAAqB,UAAZ,KAAK;AAChB,QAAI,AAAM,KAAD,KAAI,KAAK,AAAK,IAAD,KAAI,KAAK,AAAM,KAAD,KAAI,GACtC,MAAO;AAET,QAAI,AAAK,IAAD,GAAG,KAAK,AAAM,KAAD,KAAI,KAAK,AAAQ,OAAD,KAAI,GACvC,MAAmB,UAAV,IAAI;AACf,QAAI,AAAK,IAAD,KAAI,KAAK,AAAM,KAAD,KAAI,KAAK,AAAQ,OAAD,KAAI,GACxC,MAAO;AAET,QAAI,AAAM,KAAD,GAAG,KAAK,AAAQ,OAAD,KAAI,KAAK,AAAQ,OAAD,KAAI,GAC1C,MAAqB,UAAZ,KAAK;AAChB,QAAI,AAAM,KAAD,KAAI,KAAK,AAAQ,OAAD,KAAI,KAAK,AAAQ,OAAD,KAAI,GAC3C,MAAO;AAEI,iBAAa;AAC1B,QAAI,AAAM,KAAD,GAAG,GACV,AAAO,AAAmB,MAApB,OAAmB,SAAT,KAAK,IAAC;AACxB,QAAI,AAAK,IAAD,GAAG,GACT,AAAO,AAAkB,MAAnB,OAAkB,SAAR,IAAI,IAAC;AACvB,QAAI,AAAM,KAAD,GAAG,GACV,AAAO,AAAmB,MAApB,OAAmB,SAAT,KAAK,IAAC;AACxB,QAAI,AAAQ,OAAD,GAAG,GACZ,AAAO,AAAqB,MAAtB,OAAqB,SAAX,OAAO,IAAC;AAC1B,QAAI,AAAQ,OAAD,GAAG,GACZ,AAAO,AAAqB,MAAtB,OAAqB,SAAX,OAAO,IAAC;AAC1B,QAAI,AAAa,YAAD,GAAG,GACjB,AAAO,AAA2B,MAA5B,OAA2B,SAAjB,YAAY,IAAC;AAC/B,QAAiB,aAAb,YAAY,IAAG,GACjB,AAAO,AAA2B,MAA5B,OAA2B,SAAjB,YAAY,IAAC;AAE/B,UAAO,AAAO,AAAW,OAAZ;EACf;;MAzEoC,eAAQ;YAAG","file":"../../../../packages/home_automation_tools/src/common.dart.lib.js"}');
  // Exports:
  return {
    src__common: common
  };
}));

//# sourceMappingURL=common.dart.lib.js.map
