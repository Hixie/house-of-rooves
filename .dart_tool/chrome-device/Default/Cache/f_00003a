define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/synchronous_future.dart'], (function load__packages__flutter__src__cupertino__debug_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__synchronous_future$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const localizations = packages__flutter__src__widgets__widget_span$46dart.src__widgets__localizations;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  var debug = Object.create(dart.library);
  var localizations$ = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $padLeft = dartx.padLeft;
  var $padRight = dartx.padRight;
  var JSArrayOfDiagnosticsNode = () => (JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))();
  var VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
  var DatePickerDateTimeOrderL = () => (DatePickerDateTimeOrderL = dart.constFn(dart.legacy(localizations$.DatePickerDateTimeOrder)))();
  var DatePickerDateOrderL = () => (DatePickerDateOrderL = dart.constFn(dart.legacy(localizations$.DatePickerDateOrder)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var SynchronousFutureOfCupertinoLocalizations = () => (SynchronousFutureOfCupertinoLocalizations = dart.constFn(synchronous_future.SynchronousFuture$(localizations$.CupertinoLocalizations)))();
  const CT = Object.create(null);
  var L2 = "package:flutter/src/cupertino/localizations.dart";
  var L0 = "file:///C:/dev/flutter/packages/flutter/lib/src/cupertino/debug.dart";
  var L1 = "file:///C:/dev/flutter/packages/flutter/lib/src/cupertino/localizations.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.date_time_dayPeriod",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.date_dayPeriod_time",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.time_dayPeriod_date",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.dayPeriod_time_date",
        index: 3
      });
    },
    get C4() {
      return C4 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2, C3 || CT.C3], DatePickerDateTimeOrderL());
    },
    get C5() {
      return C5 = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.dmy",
        index: 0
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.mdy",
        index: 1
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.ymd",
        index: 2
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.ydm",
        index: 3
      });
    },
    get C9() {
      return C9 = dart.constList([C5 || CT.C5, C6 || CT.C6, C7 || CT.C7, C8 || CT.C8], DatePickerDateOrderL());
    },
    get C10() {
      return C10 = dart.constList(["hour", "hours"], StringL());
    },
    get C11() {
      return C11 = dart.constList(["min."], StringL());
    },
    get C12() {
      return C12 = dart.constList(["sec."], StringL());
    },
    get C13() {
      return C13 = dart.const({
        __proto__: localizations$.DefaultCupertinoLocalizations.prototype
      });
    },
    get C14() {
      return C14 = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], StringL());
    },
    get C15() {
      return C15 = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], StringL());
    },
    get C16() {
      return C16 = dart.constList(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], StringL());
    },
    get C17() {
      return C17 = dart.const({
        __proto__: localizations$._CupertinoLocalizationsDelegate.prototype
      });
    }
  }, false);
  debug.debugCheckHasCupertinoLocalizations = function debugCheckHasCupertinoLocalizations(context) {
    if (context == null) dart.nullFailed(L0, 21, 55, "context");
    if (!dart.test(dart.fn(() => {
      if (localizations.Localizations.of(localizations$.CupertinoLocalizations, context, dart.wrapType(localizations$.CupertinoLocalizations)) == null) {
        dart.throw(new assertions.FlutterError.fromParts((() => {
          let t0 = JSArrayOfDiagnosticsNode().of([]);
          t0.push(new assertions.ErrorSummary.new("No CupertinoLocalizations found."));
          t0.push(new assertions.ErrorDescription.new(dart.str(dart.runtimeType(context.widget)) + " widgets require CupertinoLocalizations " + "to be provided by a Localizations widget ancestor."));
          t0.push(new assertions.ErrorDescription.new("The cupertino library uses Localizations to generate messages, " + "labels, and abbreviations."));
          t0.push(new assertions.ErrorHint.new("To introduce a CupertinoLocalizations, either use a " + "CupertinoApp at the root of your application to include them " + "automatically, or add a Localization widget with a " + "CupertinoLocalizations delegate."));
          for (let t1 of context.describeMissingAncestor({expectedAncestorType: dart.wrapType(localizations$.CupertinoLocalizations)}))
            t0.push(t1);
          return t0;
        })()));
      }
      return true;
    }, VoidTobool())())) dart.assertFailed(null, L0, 22, 10, "() {\r\n    if (Localizations.of<CupertinoLocalizations>(context, CupertinoLocalizations) == null) {\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('No CupertinoLocalizations found.'),\r\n        ErrorDescription(\r\n          '${context.widget.runtimeType} widgets require CupertinoLocalizations '\r\n          'to be provided by a Localizations widget ancestor.'\r\n        ),\r\n        ErrorDescription(\r\n          'The cupertino library uses Localizations to generate messages, '\r\n          'labels, and abbreviations.'\r\n        ),\r\n        ErrorHint(\r\n          'To introduce a CupertinoLocalizations, either use a '\r\n          'CupertinoApp at the root of your application to include them '\r\n          'automatically, or add a Localization widget with a '\r\n          'CupertinoLocalizations delegate.'\r\n        ),\r\n        ...context.describeMissingAncestor(expectedAncestorType: CupertinoLocalizations)\r\n      ]);\r\n    }\r\n    return true;\r\n  }()");
    return true;
  };
  var _name$ = dart.privateName(localizations$, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  var C4;
  localizations$.DatePickerDateTimeOrder = class DatePickerDateTimeOrder extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (localizations$.DatePickerDateTimeOrder.new = function(index, _name) {
    if (index == null) dart.nullFailed(L1, 12, 6, "index");
    if (_name == null) dart.nullFailed(L1, 12, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = localizations$.DatePickerDateTimeOrder.prototype;
  dart.addTypeTests(localizations$.DatePickerDateTimeOrder);
  dart.addTypeCaches(localizations$.DatePickerDateTimeOrder);
  dart.setLibraryUri(localizations$.DatePickerDateTimeOrder, L2);
  dart.setFieldSignature(localizations$.DatePickerDateTimeOrder, () => ({
    __proto__: dart.getFields(localizations$.DatePickerDateTimeOrder.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(localizations$.DatePickerDateTimeOrder, ['toString']);
  localizations$.DatePickerDateTimeOrder.date_time_dayPeriod = C0 || CT.C0;
  localizations$.DatePickerDateTimeOrder.date_dayPeriod_time = C1 || CT.C1;
  localizations$.DatePickerDateTimeOrder.time_dayPeriod_date = C2 || CT.C2;
  localizations$.DatePickerDateTimeOrder.dayPeriod_time_date = C3 || CT.C3;
  localizations$.DatePickerDateTimeOrder.values = C4 || CT.C4;
  var C5;
  var C6;
  var C7;
  var C8;
  var C9;
  localizations$.DatePickerDateOrder = class DatePickerDateOrder extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (localizations$.DatePickerDateOrder.new = function(index, _name) {
    if (index == null) dart.nullFailed(L1, 32, 6, "index");
    if (_name == null) dart.nullFailed(L1, 32, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = localizations$.DatePickerDateOrder.prototype;
  dart.addTypeTests(localizations$.DatePickerDateOrder);
  dart.addTypeCaches(localizations$.DatePickerDateOrder);
  dart.setLibraryUri(localizations$.DatePickerDateOrder, L2);
  dart.setFieldSignature(localizations$.DatePickerDateOrder, () => ({
    __proto__: dart.getFields(localizations$.DatePickerDateOrder.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(localizations$.DatePickerDateOrder, ['toString']);
  localizations$.DatePickerDateOrder.dmy = C5 || CT.C5;
  localizations$.DatePickerDateOrder.mdy = C6 || CT.C6;
  localizations$.DatePickerDateOrder.ymd = C7 || CT.C7;
  localizations$.DatePickerDateOrder.ydm = C8 || CT.C8;
  localizations$.DatePickerDateOrder.values = C9 || CT.C9;
  localizations$.CupertinoLocalizations = class CupertinoLocalizations extends core.Object {
    static of(context) {
      if (context == null) dart.nullFailed(L1, 261, 49, "context");
      if (!dart.test(debug.debugCheckHasCupertinoLocalizations(context))) dart.assertFailed(null, L1, 262, 12, "debugCheckHasCupertinoLocalizations(context)");
      return dart.nullCheck(localizations.Localizations.of(localizations$.CupertinoLocalizations, context, dart.wrapType(localizations$.CupertinoLocalizations)));
    }
  };
  (localizations$.CupertinoLocalizations.new = function() {
    ;
  }).prototype = localizations$.CupertinoLocalizations.prototype;
  dart.addTypeTests(localizations$.CupertinoLocalizations);
  dart.addTypeCaches(localizations$.CupertinoLocalizations);
  dart.setLibraryUri(localizations$.CupertinoLocalizations, L2);
  localizations$._CupertinoLocalizationsDelegate = class _CupertinoLocalizationsDelegate extends localizations.LocalizationsDelegate$(localizations$.CupertinoLocalizations) {
    isSupported(locale) {
      if (locale == null) dart.nullFailed(L1, 271, 27, "locale");
      return locale.languageCode === "en";
    }
    load(locale) {
      if (locale == null) dart.nullFailed(L1, 274, 46, "locale");
      return localizations$.DefaultCupertinoLocalizations.load(locale);
    }
    shouldReload(old) {
      localizations$._CupertinoLocalizationsDelegate.as(old);
      if (old == null) dart.nullFailed(L1, 277, 53, "old");
      return false;
    }
    toString() {
      return "DefaultCupertinoLocalizations.delegate(en_US)";
    }
  };
  (localizations$._CupertinoLocalizationsDelegate.new = function() {
    localizations$._CupertinoLocalizationsDelegate.__proto__.new.call(this);
    ;
  }).prototype = localizations$._CupertinoLocalizationsDelegate.prototype;
  dart.addTypeTests(localizations$._CupertinoLocalizationsDelegate);
  dart.addTypeCaches(localizations$._CupertinoLocalizationsDelegate);
  dart.setMethodSignature(localizations$._CupertinoLocalizationsDelegate, () => ({
    __proto__: dart.getMethods(localizations$._CupertinoLocalizationsDelegate.__proto__),
    isSupported: dart.fnType(core.bool, [ui.Locale]),
    load: dart.fnType(async.Future$(localizations$.CupertinoLocalizations), [ui.Locale]),
    shouldReload: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(localizations$._CupertinoLocalizationsDelegate, L2);
  dart.defineExtensionMethods(localizations$._CupertinoLocalizationsDelegate, ['toString']);
  var C10;
  var C11;
  var C12;
  var C13;
  var C14;
  var C15;
  var C16;
  var C17;
  localizations$.DefaultCupertinoLocalizations = class DefaultCupertinoLocalizations extends core.Object {
    datePickerYear(yearIndex) {
      if (yearIndex == null) dart.nullFailed(L1, 335, 29, "yearIndex");
      return dart.toString(yearIndex);
    }
    datePickerMonth(monthIndex) {
      if (monthIndex == null) dart.nullFailed(L1, 338, 30, "monthIndex");
      return localizations$.DefaultCupertinoLocalizations._months[$_get](dart.notNull(monthIndex) - 1);
    }
    datePickerDayOfMonth(dayIndex) {
      if (dayIndex == null) dart.nullFailed(L1, 341, 35, "dayIndex");
      return dart.toString(dayIndex);
    }
    datePickerHour(hour) {
      if (hour == null) dart.nullFailed(L1, 344, 29, "hour");
      return dart.toString(hour);
    }
    datePickerHourSemanticsLabel(hour) {
      if (hour == null) dart.nullFailed(L1, 347, 43, "hour");
      return dart.toString(hour) + " o'clock";
    }
    datePickerMinute(minute) {
      if (minute == null) dart.nullFailed(L1, 350, 31, "minute");
      return dart.toString(minute)[$padLeft](2, "0");
    }
    datePickerMinuteSemanticsLabel(minute) {
      if (minute == null) dart.nullFailed(L1, 353, 45, "minute");
      if (minute === 1) return "1 minute";
      return dart.toString(minute) + " minutes";
    }
    datePickerMediumDate(date) {
      if (date == null) dart.nullFailed(L1, 360, 40, "date");
      return dart.str(localizations$.DefaultCupertinoLocalizations._shortWeekdays[$_get](dart.notNull(date.weekday) - 1)) + " " + dart.str(localizations$.DefaultCupertinoLocalizations._shortMonths[$_get](dart.notNull(date.month) - 1)) + " " + dart.toString(date.day)[$padRight](2);
    }
    get datePickerDateOrder() {
      return localizations$.DatePickerDateOrder.mdy;
    }
    get datePickerDateTimeOrder() {
      return localizations$.DatePickerDateTimeOrder.date_time_dayPeriod;
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get todayLabel() {
      return "Today";
    }
    get alertDialogLabel() {
      return "Alert";
    }
    tabSemanticsLabel(opts) {
      let tabIndex = opts && 'tabIndex' in opts ? opts.tabIndex : null;
      if (tabIndex == null) dart.nullFailed(L1, 385, 42, "tabIndex");
      let tabCount = opts && 'tabCount' in opts ? opts.tabCount : null;
      if (tabCount == null) dart.nullFailed(L1, 385, 65, "tabCount");
      if (!(dart.notNull(tabIndex) >= 1)) dart.assertFailed(null, L1, 386, 12, "tabIndex >= 1");
      if (!(dart.notNull(tabCount) >= 1)) dart.assertFailed(null, L1, 387, 12, "tabCount >= 1");
      return "Tab " + dart.str(tabIndex) + " of " + dart.str(tabCount);
    }
    timerPickerHour(hour) {
      if (hour == null) dart.nullFailed(L1, 392, 30, "hour");
      return dart.toString(hour);
    }
    timerPickerMinute(minute) {
      if (minute == null) dart.nullFailed(L1, 395, 32, "minute");
      return dart.toString(minute);
    }
    timerPickerSecond(second) {
      if (second == null) dart.nullFailed(L1, 398, 32, "second");
      return dart.toString(second);
    }
    timerPickerHourLabel(hour) {
      if (hour == null) dart.nullFailed(L1, 401, 35, "hour");
      return hour === 1 ? "hour" : "hours";
    }
    get timerPickerHourLabels() {
      return C10 || CT.C10;
    }
    timerPickerMinuteLabel(minute) {
      if (minute == null) dart.nullFailed(L1, 407, 37, "minute");
      return "min.";
    }
    get timerPickerMinuteLabels() {
      return C11 || CT.C11;
    }
    timerPickerSecondLabel(second) {
      if (second == null) dart.nullFailed(L1, 413, 37, "second");
      return "sec.";
    }
    get timerPickerSecondLabels() {
      return C12 || CT.C12;
    }
    get cutButtonLabel() {
      return "Cut";
    }
    get copyButtonLabel() {
      return "Copy";
    }
    get pasteButtonLabel() {
      return "Paste";
    }
    get selectAllButtonLabel() {
      return "Select All";
    }
    get searchTextFieldPlaceholderLabel() {
      return "Search";
    }
    get modalBarrierDismissLabel() {
      return "Dismiss";
    }
    static load(locale) {
      if (locale == null) dart.nullFailed(L1, 442, 53, "locale");
      return new (SynchronousFutureOfCupertinoLocalizations()).new(C13 || CT.C13);
    }
  };
  (localizations$.DefaultCupertinoLocalizations.new = function() {
    ;
  }).prototype = localizations$.DefaultCupertinoLocalizations.prototype;
  dart.addTypeTests(localizations$.DefaultCupertinoLocalizations);
  dart.addTypeCaches(localizations$.DefaultCupertinoLocalizations);
  localizations$.DefaultCupertinoLocalizations[dart.implements] = () => [localizations$.CupertinoLocalizations];
  dart.setMethodSignature(localizations$.DefaultCupertinoLocalizations, () => ({
    __proto__: dart.getMethods(localizations$.DefaultCupertinoLocalizations.__proto__),
    datePickerYear: dart.fnType(core.String, [core.int]),
    datePickerMonth: dart.fnType(core.String, [core.int]),
    datePickerDayOfMonth: dart.fnType(core.String, [core.int]),
    datePickerHour: dart.fnType(core.String, [core.int]),
    datePickerHourSemanticsLabel: dart.fnType(core.String, [core.int]),
    datePickerMinute: dart.fnType(core.String, [core.int]),
    datePickerMinuteSemanticsLabel: dart.fnType(core.String, [core.int]),
    datePickerMediumDate: dart.fnType(core.String, [core.DateTime]),
    tabSemanticsLabel: dart.fnType(core.String, [], {}, {tabCount: core.int, tabIndex: core.int}),
    timerPickerHour: dart.fnType(core.String, [core.int]),
    timerPickerMinute: dart.fnType(core.String, [core.int]),
    timerPickerSecond: dart.fnType(core.String, [core.int]),
    timerPickerHourLabel: dart.fnType(core.String, [core.int]),
    timerPickerMinuteLabel: dart.fnType(core.String, [core.int]),
    timerPickerSecondLabel: dart.fnType(core.String, [core.int])
  }));
  dart.setGetterSignature(localizations$.DefaultCupertinoLocalizations, () => ({
    __proto__: dart.getGetters(localizations$.DefaultCupertinoLocalizations.__proto__),
    datePickerDateOrder: localizations$.DatePickerDateOrder,
    datePickerDateTimeOrder: localizations$.DatePickerDateTimeOrder,
    anteMeridiemAbbreviation: core.String,
    postMeridiemAbbreviation: core.String,
    todayLabel: core.String,
    alertDialogLabel: core.String,
    timerPickerHourLabels: core.List$(core.String),
    timerPickerMinuteLabels: core.List$(core.String),
    timerPickerSecondLabels: core.List$(core.String),
    cutButtonLabel: core.String,
    copyButtonLabel: core.String,
    pasteButtonLabel: core.String,
    selectAllButtonLabel: core.String,
    searchTextFieldPlaceholderLabel: core.String,
    modalBarrierDismissLabel: core.String
  }));
  dart.setLibraryUri(localizations$.DefaultCupertinoLocalizations, L2);
  dart.defineLazy(localizations$.DefaultCupertinoLocalizations, {
    /*localizations$.DefaultCupertinoLocalizations._shortWeekdays*/get _shortWeekdays() {
      return C14 || CT.C14;
    },
    /*localizations$.DefaultCupertinoLocalizations._shortMonths*/get _shortMonths() {
      return C15 || CT.C15;
    },
    /*localizations$.DefaultCupertinoLocalizations._months*/get _months() {
      return C16 || CT.C16;
    },
    /*localizations$.DefaultCupertinoLocalizations.delegate*/get delegate() {
      return C17 || CT.C17;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/cupertino/debug.dart", {
    "package:flutter/src/cupertino/debug.dart": debug,
    "package:flutter/src/cupertino/localizations.dart": localizations$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["debug.dart","localizations.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAoBsD;AACpD,mBAAO,AAsBN;AArBC,UAAkB,AAA4D,sEAAjC,OAAO,EAAE,yDAA2B;AAkB7E,QAjBF,WAAmB,sCAA2B;;AAC5C,kDAAa;AACb,sDAAgB,SACI,iBAAf,AAAQ,OAAD,YAAoB,6CAC9B;AAEF,sDAAgB,AACd,oEACA;AAEF,+CAAS,AACP,yDACA,kEACA,wDACA;AAEF,wBAAG,AAAQ,QAAD,gDAA+C;AAAzD;;;;AAGJ,YAAO;;AAET,UAAO;EACT;;;;;;;;;;ICjBA;;;QAjBK;;;;;EAiBL;;;;;;;;;;;;;;;;;;;;;;;IAoBA;;;QAjBK;;;;;EAiBL;;;;;;;;;;;;;;;;;UAoNgD;AAC5C,qBAAO,0CAAoC,OAAO;AAClD,YAAgF,gBAA3D,sEAA2B,OAAO,EAAE;IAC3D;;;;EACF;;;;;;UAM0B;AAAW,YAAA,AAAO,AAAa,OAAd,kBAAiB;IAAI;;UAGnB;AAAW,YAA8B,mDAAK,MAAM;IAAC;;wDAG9C;;AAAQ;IAAK;;AAG1C;IAA+C;;;AAZ9D;;EAAiC;;;;;;;;;;;;;;;;;;;;;UAmEb;AAAc,YAAU,eAAV,SAAS;IAAW;;UAGjC;AAAe,YAAA,AAAO,6DAAY,aAAX,UAAU,IAAG;IAAE;;UAGjC;AAAa,YAAS,eAAT,QAAQ;IAAW;;UAGtC;AAAS,YAAK,eAAL,IAAI;IAAW;;UAGV;AAAS,YAAK,AAAW,eAAhB,IAAI,IAAc;IAAU;;UAGjD;AAAW,YAAO,AAAW,eAAlB,MAAM,YAAoB,GAAG;IAAI;;UAG9B;AACxC,UAAI,AAAO,MAAD,KAAI,GACZ,MAAO;AACT,YAAc,AAAW,eAAlB,MAAM,IAAc;IAC7B;;UAGqC;AACnC,sBAAU,AAAc,mEAAc,aAAb,AAAK,IAAD,kBAA4B,eACpD,AAAY,iEAAY,aAAX,AAAK,IAAD,gBAA2B,MACnC,AAAW,cAApB,AAAK,IAAD,iBAAyB;IACpC;;AAG+C,YAAoB;IAAG;;AAGf,YAAwB;IAAmB;;AAG3D;IAAI;;AAGJ;IAAI;;AAGlB;IAAO;;AAGD;IAAO;;UAGC;;UAAuB;;AAC5D,YAAgB,aAAT,QAAQ,KAAI;AACnB,YAAgB,aAAT,QAAQ,KAAI;AACnB,YAAO,AAA4B,mBAAtB,QAAQ,sBAAK,QAAQ;IACpC;;UAG2B;AAAS,YAAK,eAAL,IAAI;IAAW;;UAGtB;AAAW,YAAO,eAAP,MAAM;IAAW;;UAG5B;AAAW,YAAO,eAAP,MAAM;IAAW;;UAGzB;AAAS,YAAA,AAAK,KAAD,KAAI,IAAI,SAAS;IAAO;;AAG3B;IAA+B;;UAGvC;AAAW;IAAM;;AAGP;IAAsB;;UAGhC;AAAW;IAAM;;AAGP;IAAsB;;AAGrC;IAAK;;AAGJ;IAAM;;AAGL;IAAO;;AAGH;IAAY;;AAGD;IAAQ;;AAGf;IAAS;;UAQE;AAChD,YAAO;IACT;;;;EA1JqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAEX,2DAAc;;;MAUd,yDAAY;;;MAeZ,oDAAO;;;MAmI0B,qDAAQ","file":"../../../../../../../packages/flutter/src/cupertino/debug.dart.lib.js"}');
  // Exports:
  return {
    src__cupertino__debug: debug,
    src__cupertino__localizations: localizations$
  };
}));

//# sourceMappingURL=debug.dart.lib.js.map
