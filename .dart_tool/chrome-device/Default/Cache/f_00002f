define(['dart_sdk', 'packages/home_automation_tools/src/common.dart', 'packages/home_automation_tools/src/watch_stream.dart', 'packages/home_automation_tools/src/radiation.dart'], (function load__packages__home_automation_tools__src__devices__cloudbit_dart(dart_sdk, packages__home_automation_tools__src__common$46dart, packages__home_automation_tools__src__watch_stream$46dart, packages__home_automation_tools__src__radiation$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const common = packages__home_automation_tools__src__common$46dart.src__common;
  const watch_stream = packages__home_automation_tools__src__watch_stream$46dart.src__watch_stream;
  const temperature = packages__home_automation_tools__src__radiation$46dart.src__temperature;
  var cloudbit = Object.create(dart.library);
  var $toString = dartx.toString;
  var $putIfAbsent = dartx.putIfAbsent;
  var $isEmpty = dartx.isEmpty;
  var $leftShift = dartx['<<'];
  var $round = dartx.round;
  var $clamp = dartx.clamp;
  var $_get = dartx._get;
  var $values = dartx.values;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $padRight = dartx.padRight;
  var $_equals = dartx._equals;
  var $toDouble = dartx.toDouble;
  var $abs = dartx.abs;
  var LedColorL = () => (LedColorL = dart.constFn(dart.legacy(cloudbit.LedColor)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var WatchStreamOfboolL = () => (WatchStreamOfboolL = dart.constFn(watch_stream.WatchStream$(boolL())))();
  var WatchStreamLOfboolL = () => (WatchStreamLOfboolL = dart.constFn(dart.legacy(WatchStreamOfboolL())))();
  var IdentityMapOfintL$WatchStreamLOfboolL = () => (IdentityMapOfintL$WatchStreamLOfboolL = dart.constFn(_js_helper.IdentityMap$(intL(), WatchStreamLOfboolL())))();
  var _IdentityHashSetOfintL = () => (_IdentityHashSetOfintL = dart.constFn(collection._IdentityHashSet$(intL())))();
  var StreamViewOfboolL = () => (StreamViewOfboolL = dart.constFn(async.StreamView$(boolL())))();
  var VoidToWatchStreamLOfboolL = () => (VoidToWatchStreamLOfboolL = dart.constFn(dart.fnType(WatchStreamLOfboolL(), [])))();
  var HandlerWatchStreamOfboolL = () => (HandlerWatchStreamOfboolL = dart.constFn(watch_stream.HandlerWatchStream$(boolL())))();
  var SinkOfboolL = () => (SinkOfboolL = dart.constFn(core.Sink$(boolL())))();
  var SinkLOfboolL = () => (SinkLOfboolL = dart.constFn(dart.legacy(SinkOfboolL())))();
  var SinkLOfboolLTovoid = () => (SinkLOfboolLTovoid = dart.constFn(dart.fnType(dart.void, [SinkLOfboolL()])))();
  var VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  var intLToNull = () => (intLToNull = dart.constFn(dart.fnType(core.Null, [intL()])))();
  const CT = Object.create(null);
  var L0 = "package:home_automation_tools/src/devices/cloudbit.dart";
  var L1 = "file:///C:/dev/dart-home-automation-tools/lib/src/devices/cloudbit.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.black",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.blue",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.red",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.purple",
        index: 3
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.green",
        index: 4
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.teal",
        index: 5
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.yellow",
        index: 6
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: cloudbit.LedColor.prototype,
        [_name$]: "LedColor.white",
        index: 7
      });
    },
    get C8() {
      return C8 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2, C3 || CT.C3, C4 || CT.C4, C5 || CT.C5, C6 || CT.C6, C7 || CT.C7], LedColorL());
    },
    get C9() {
      return C9 = dart.const({
        __proto__: common.LogLevel.prototype,
        [_name]: "LogLevel.info",
        index: 1
      });
    }
  }, false);
  var _name$ = dart.privateName(cloudbit, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  var C7;
  var C8;
  cloudbit.LedColor = class LedColor extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (cloudbit.LedColor.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = cloudbit.LedColor.prototype;
  dart.addTypeTests(cloudbit.LedColor);
  dart.addTypeCaches(cloudbit.LedColor);
  dart.setMethodSignature(cloudbit.LedColor, () => ({
    __proto__: dart.getMethods(cloudbit.LedColor.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(cloudbit.LedColor, L0);
  dart.setFieldSignature(cloudbit.LedColor, () => ({
    __proto__: dart.getFields(cloudbit.LedColor.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(cloudbit.LedColor, ['toString']);
  cloudbit.LedColor.black = C0 || CT.C0;
  cloudbit.LedColor.blue = C1 || CT.C1;
  cloudbit.LedColor.red = C2 || CT.C2;
  cloudbit.LedColor.purple = C3 || CT.C3;
  cloudbit.LedColor.green = C4 || CT.C4;
  cloudbit.LedColor.teal = C5 || CT.C5;
  cloudbit.LedColor.yellow = C6 || CT.C6;
  cloudbit.LedColor.white = C7 || CT.C7;
  cloudbit.LedColor.values = C8 || CT.C8;
  var message$ = dart.privateName(cloudbit, "CloudBitException.message");
  var cloudbit$ = dart.privateName(cloudbit, "CloudBitException.cloudbit");
  cloudbit.CloudBitException = class CloudBitException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get cloudbit() {
      return this[cloudbit$];
    }
    set cloudbit(value) {
      super.cloudbit = value;
    }
    toString() {
      let t0;
      return dart.str(this.message) + " (device " + dart.str((t0 = this.cloudbit, t0 == null ? null : t0.displayName)) + ")";
    }
  };
  (cloudbit.CloudBitException.new = function(message, cloudbit) {
    this[message$] = message;
    this[cloudbit$] = cloudbit;
    ;
  }).prototype = cloudbit.CloudBitException.prototype;
  dart.addTypeTests(cloudbit.CloudBitException);
  dart.addTypeCaches(cloudbit.CloudBitException);
  cloudbit.CloudBitException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(cloudbit.CloudBitException, () => ({
    __proto__: dart.getMethods(cloudbit.CloudBitException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(cloudbit.CloudBitException, L0);
  dart.setFieldSignature(cloudbit.CloudBitException, () => ({
    __proto__: dart.getFields(cloudbit.CloudBitException.__proto__),
    message: dart.finalFieldType(dart.legacy(core.String)),
    cloudbit: dart.finalFieldType(dart.legacy(cloudbit.CloudBit))
  }));
  dart.defineExtensionMethods(cloudbit.CloudBitException, ['toString']);
  var _name = dart.privateName(common, "_name");
  var C9;
  var onLog$ = dart.privateName(cloudbit, "CloudBitProvider.onLog");
  cloudbit.CloudBitProvider = class CloudBitProvider extends core.Object {
    get onLog() {
      return this[onLog$];
    }
    set onLog(value) {
      super.onLog = value;
    }
    log(deviceId, message, opts) {
      let t1, t0;
      let level = opts && 'level' in opts ? opts.level : C9 || CT.C9;
      if (this.onLog != null && dart.notNull(level.index) <= dart.notNull(common.LogLevel.info.index)) {
        t0 = deviceId;
        t1 = message;
        this.onLog(t0, t1);
      }
    }
  };
  (cloudbit.CloudBitProvider.new = function(opts) {
    let onLog = opts && 'onLog' in opts ? opts.onLog : null;
    this[onLog$] = onLog;
    ;
  }).prototype = cloudbit.CloudBitProvider.prototype;
  dart.addTypeTests(cloudbit.CloudBitProvider);
  dart.addTypeCaches(cloudbit.CloudBitProvider);
  dart.setMethodSignature(cloudbit.CloudBitProvider, () => ({
    __proto__: dart.getMethods(cloudbit.CloudBitProvider.__proto__),
    log: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)], {level: dart.legacy(common.LogLevel)}, {})
  }));
  dart.setLibraryUri(cloudbit.CloudBitProvider, L0);
  dart.setFieldSignature(cloudbit.CloudBitProvider, () => ({
    __proto__: dart.getFields(cloudbit.CloudBitProvider.__proto__),
    onLog: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)])))
  }));
  cloudbit.CloudBit = class CloudBit extends core.Object {
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.displayName) + ", " + dart.str(this.deviceId) + ")";
    }
  };
  (cloudbit.CloudBit.new = function() {
    ;
  }).prototype = cloudbit.CloudBit.prototype;
  dart.addTypeTests(cloudbit.CloudBit);
  dart.addTypeCaches(cloudbit.CloudBit);
  dart.setMethodSignature(cloudbit.CloudBit, () => ({
    __proto__: dart.getMethods(cloudbit.CloudBit.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(cloudbit.CloudBit, L0);
  dart.defineExtensionMethods(cloudbit.CloudBit, ['toString']);
  var _outputs = dart.privateName(cloudbit, "_outputs");
  var _activeBits = dart.privateName(cloudbit, "_activeBits");
  var _subscription = dart.privateName(cloudbit, "_subscription");
  var _setup = dart.privateName(cloudbit, "_setup");
  var _start = dart.privateName(cloudbit, "_start");
  var _end = dart.privateName(cloudbit, "_end");
  var _handleInput = dart.privateName(cloudbit, "_handleInput");
  var _dispatchBit = dart.privateName(cloudbit, "_dispatchBit");
  var input$ = dart.privateName(cloudbit, "BitDemultiplexer.input");
  var bitCount$ = dart.privateName(cloudbit, "BitDemultiplexer.bitCount");
  var onDebugObserver$ = dart.privateName(cloudbit, "BitDemultiplexer.onDebugObserver");
  cloudbit.BitDemultiplexer = class BitDemultiplexer extends core.Object {
    get input() {
      return this[input$];
    }
    set input(value) {
      super.input = value;
    }
    get bitCount() {
      return this[bitCount$];
    }
    set bitCount(value) {
      super.bitCount = value;
    }
    get onDebugObserver() {
      return this[onDebugObserver$];
    }
    set onDebugObserver(value) {
      super.onDebugObserver = value;
    }
    _get(bit) {
      if (!(dart.notNull(bit) >= 1)) dart.assertFailed(null, L1, 103, 12, "bit >= 1");
      if (!(dart.notNull(bit) <= dart.notNull(this.bitCount))) dart.assertFailed(null, L1, 104, 12, "bit <= bitCount");
      return new (StreamViewOfboolL()).new(this[_outputs][$putIfAbsent](bit, dart.fn(() => this[_setup](bit), VoidToWatchStreamLOfboolL())));
    }
    [_setup](bit) {
      let controller = new (HandlerWatchStreamOfboolL()).new(dart.fn(sink => this[_start](bit), SinkLOfboolLTovoid()), dart.fn(() => this[_end](bit), VoidTovoid()));
      return controller;
    }
    [_start](bit) {
      if (dart.test(this[_activeBits][$isEmpty])) {
        if (!(this[_subscription] == null)) dart.assertFailed(null, L1, 117, 14, "_subscription == null");
        this[_subscription] = this.input.listen(dart.bind(this, _handleInput));
      }
      this[_activeBits].add(bit);
    }
    [_end](bit) {
      this[_activeBits].remove(bit);
      if (dart.test(this[_activeBits][$isEmpty])) {
        if (!(this[_subscription] != null)) dart.assertFailed(null, L1, 126, 14, "_subscription != null");
        this[_subscription].cancel();
      }
    }
    [_handleInput](value) {
      let t0;
      if (value != null) {
        let bitfield = cloudbit.BitDemultiplexer.valueToBitField(value, this.bitCount);
        if (this.onDebugObserver != null) {
          t0 = bitfield;
          this.onDebugObserver(t0);
        }
        for (let bit = 1; bit <= dart.notNull(this.bitCount); bit = bit + 1)
          this[_dispatchBit](bit, (dart.notNull(bitfield) & (1)[$leftShift](bit - 1)) !== 0);
      }
    }
    static valueToBitField(value, bitCount) {
      if (!(value != null)) dart.assertFailed(null, L1, 142, 12, "value != null");
      if (!(dart.notNull(value) >= 0)) dart.assertFailed(null, L1, 143, 12, "value >= 0");
      if (!(dart.notNull(value) <= 1023)) dart.assertFailed(null, L1, 144, 12, "value <= 1023");
      let scaledValue = dart.notNull(value) / 1023.0 * 99.0;
      let floatingBitfield = scaledValue / (40.0 / (1)[$leftShift](dart.notNull(bitCount) - 1));
      let bitfield = dart.asNullableInt(floatingBitfield[$round]()[$clamp](0, (1)[$leftShift](bitCount) - 1));
      return bitfield;
    }
    [_dispatchBit](bit, value) {
      if (dart.test(this[_activeBits].contains(bit))) this[_outputs][$_get](bit).add(value);
    }
    dispose() {
      for (let bit of this[_outputs][$values])
        bit.close();
    }
  };
  (cloudbit.BitDemultiplexer.new = function(input, bitCount, opts) {
    let onDebugObserver = opts && 'onDebugObserver' in opts ? opts.onDebugObserver : null;
    this[_outputs] = new (IdentityMapOfintL$WatchStreamLOfboolL()).new();
    this[_activeBits] = new (_IdentityHashSetOfintL()).new();
    this[_subscription] = null;
    this[input$] = input;
    this[bitCount$] = bitCount;
    this[onDebugObserver$] = onDebugObserver;
    if (!(dart.notNull(this.bitCount) >= 2)) dart.assertFailed(null, L1, 83, 12, "bitCount >= 2");
    if (!(dart.notNull(this.bitCount) <= 4)) dart.assertFailed(null, L1, 84, 12, "bitCount <= 4");
  }).prototype = cloudbit.BitDemultiplexer.prototype;
  dart.addTypeTests(cloudbit.BitDemultiplexer);
  dart.addTypeCaches(cloudbit.BitDemultiplexer);
  dart.setMethodSignature(cloudbit.BitDemultiplexer, () => ({
    __proto__: dart.getMethods(cloudbit.BitDemultiplexer.__proto__),
    _get: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.bool))), [dart.legacy(core.int)]),
    [_setup]: dart.fnType(dart.legacy(watch_stream.WatchStream$(dart.legacy(core.bool))), [dart.legacy(core.int)]),
    [_start]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_end]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_handleInput]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_dispatchBit]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.bool)]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cloudbit.BitDemultiplexer, L0);
  dart.setFieldSignature(cloudbit.BitDemultiplexer, () => ({
    __proto__: dart.getFields(cloudbit.BitDemultiplexer.__proto__),
    input: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(core.int)))),
    bitCount: dart.finalFieldType(dart.legacy(core.int)),
    onDebugObserver: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.int)]))),
    [_outputs]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(watch_stream.WatchStream$(dart.legacy(core.bool)))))),
    [_activeBits]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(core.int)))),
    [_subscription]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(core.int))))
  }));
  var _value$ = dart.privateName(cloudbit, "_value");
  var _valueIsF = dart.privateName(cloudbit, "_valueIsF");
  cloudbit.TemperatureSensor = class TemperatureSensor extends temperature.Temperature {
    get fahrenheit() {
      return dart.test(this[_valueIsF]) ? 100.0 * dart.notNull(this[_value$]) / 1023.0 : dart.notNull(this.celsius) * 9.0 / 5.0 + 32.0;
    }
    get celsius() {
      return dart.test(this[_valueIsF]) ? (dart.notNull(this.fahrenheit) - 32.0) * 5.0 / 9.0 : 100.0 * dart.notNull(this[_value$]) / 1023.0;
    }
  };
  (cloudbit.TemperatureSensor.F = function(_value, opts) {
    let station = opts && 'station' in opts ? opts.station : null;
    let timestamp = opts && 'timestamp' in opts ? opts.timestamp : null;
    this[_value$] = _value;
    this[_valueIsF] = true;
    cloudbit.TemperatureSensor.__proto__.new.call(this, {station: station, timestamp: timestamp});
    ;
  }).prototype = cloudbit.TemperatureSensor.prototype;
  (cloudbit.TemperatureSensor.C = function(_value, opts) {
    let station = opts && 'station' in opts ? opts.station : null;
    let timestamp = opts && 'timestamp' in opts ? opts.timestamp : null;
    this[_value$] = _value;
    this[_valueIsF] = false;
    cloudbit.TemperatureSensor.__proto__.new.call(this, {station: station, timestamp: timestamp});
    ;
  }).prototype = cloudbit.TemperatureSensor.prototype;
  dart.addTypeTests(cloudbit.TemperatureSensor);
  dart.addTypeCaches(cloudbit.TemperatureSensor);
  dart.setGetterSignature(cloudbit.TemperatureSensor, () => ({
    __proto__: dart.getGetters(cloudbit.TemperatureSensor.__proto__),
    fahrenheit: dart.legacy(core.double),
    celsius: dart.legacy(core.double)
  }));
  dart.setLibraryUri(cloudbit.TemperatureSensor, L0);
  dart.setFieldSignature(cloudbit.TemperatureSensor, () => ({
    __proto__: dart.getFields(cloudbit.TemperatureSensor.__proto__),
    [_value$]: dart.finalFieldType(dart.legacy(core.int)),
    [_valueIsF]: dart.finalFieldType(dart.legacy(core.bool))
  }));
  cloudbit.getRawValueDiskLogger = function getRawValueDiskLogger(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let log = opts && 'log' in opts ? opts.log : null;
    return dart.fn(value => {
      let t0;
      let number = "-";
      if (value != null) number = (dart.notNull(value) / 1023.0 * 99.0)[$toStringAsFixed](1);
      t0 = log.openWrite({mode: io.FileMode.append});
      (() => {
        t0.writeln(dart.str(name) + "," + new core.DateTime.now().toIso8601String()[$padRight](26, "0") + "," + dart.str(value) + "," + number);
        t0.close();
        return t0;
      })();
    }, intLToNull());
  };
  cloudbit.getAverageValueLogger = function getAverageValueLogger(opts) {
    let log = opts && 'log' in opts ? opts.log : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let slop = opts && 'slop' in opts ? opts.slop : 10.23;
    let reportingThreshold = opts && 'reportingThreshold' in opts ? opts.reportingThreshold : 1.0230000000000001;
    let diskLog = opts && 'diskLog' in opts ? opts.diskLog : null;
    let connected = false;
    let average = null;
    let countedValues = null;
    return dart.fn(value => {
      let t0;
      let lastConnected = connected;
      connected = value != null;
      if (!connected[$_equals](lastConnected)) log((connected ? "connected to" : "disconnected from") + " " + dart.str(name) + " cloudbit");
      if (value == null) return;
      if (average == null || (dart.notNull(average) - value[$toDouble]())[$abs]() > dart.notNull(slop)) {
        log("cloudbit raw value " + dart.str(value) + " [" + dart.str((dart.notNull(value) / 1023.0 * 99.0)[$round]()) + "], far outside previous average (" + dart.str((t0 = average, t0 == null ? null : t0[$toStringAsFixed](1))) + ")");
        average = value[$toDouble]();
        countedValues = 1;
      } else {
        let oldAverage = average;
        average = (dart.notNull(average) * dart.notNull(countedValues) + dart.notNull(value)) / (countedValues[$toDouble]() + 1.0);
        countedValues = dart.notNull(countedValues) + 1;
        if ((dart.notNull(oldAverage) - dart.notNull(average))[$abs]() > dart.notNull(reportingThreshold)) log("cloudbit raw value " + dart.str(value) + " [" + dart.str((dart.notNull(value) / 1023.0 * 99.0)[$round]()) + "], new average is " + average[$toStringAsFixed](1) + " [" + dart.str((dart.notNull(average) / 1023.0 * 99.0)[$round]()) + "]");
      }
    }, intLToNull());
  };
  dart.trackLibraries("packages/home_automation_tools/src/devices/cloudbit.dart", {
    "package:home_automation_tools/src/devices/cloudbit.dart": cloudbit
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["cloudbit.dart"],"names":[],"mappings":"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","file":"../../../../../packages/home_automation_tools/src/devices/cloudbit.dart.lib.js"}');
  // Exports:
  return {
    src__devices__cloudbit: cloudbit
  };
}));

//# sourceMappingURL=cloudbit.dart.lib.js.map
